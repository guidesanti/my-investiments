openapi: 3.0.0

info:
  title: MyWallet Assets API
  description: MyWallet Assets API
  version: 1.0.0
  contact:
    email: guidesanti@yahoo.com.br
  license:
    name: The MIT License
    url: https://opensource.org/license/mit/

servers:
  - url: 'https://localhost:8080/ms-assets/v1'
    description: Local environment

tags:
  - name: assets
    description: Finantial assets

paths:
  /assets:
    post:
      tags:
        - assets
      summary: Create asset
      operationId: createAsset
      description: Creates new asset
      parameters:
        - $ref: '#/components/parameters/XTraceIdHeader'
        - $ref: '#/components/parameters/XIdempotenceIdHeader'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAssetDTO'
        description: Asset to create
      responses:
        '201':
          description: Asset created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/AssetDTO'
        '400':
          $ref: '#/components/responses/ClientError'
        '422':
          $ref: '#/components/responses/BusinessError'
        '500':
          $ref: '#/components/responses/ServerError'
    get:
      tags:
        - assets
      summary: Get all assets
      operationId: getAllAssets
      description: |
        Get all assets
      parameters:
        - $ref: '#/components/parameters/XTraceIdHeader'
      responses:
        '200':
          description: All assets results
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/AssetDTO'
        '400':
          $ref: '#/components/responses/ClientError'
        '422':
          $ref: '#/components/responses/BusinessError'
        '500':
          $ref: '#/components/responses/ServerError'
  /assets/{assetId}:
    put:
      tags:
        - assets
      summary: Update asset
      operationId: updateAsset
      description: |
        Update asset by its ID
      parameters:
        - $ref: '#/components/parameters/XTraceIdHeader'
        - $ref: '#/components/parameters/XIdempotenceIdHeader'
        - $ref: '#/components/parameters/AssetIdPathParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAssetDTO'
        description: Asset to update
      responses:
        '200':
          description: The updated asset matching the ID
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/AssetDTO'
        '400':
          $ref: '#/components/responses/ClientError'
        '422':
          $ref: '#/components/responses/BusinessError'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - assets
      summary: Delete asset
      operationId: deleteAsset
      description: |
        Delete asset by its ID
      parameters:
        - $ref: '#/components/parameters/XTraceIdHeader'
        - $ref: '#/components/parameters/AssetIdPathParam'
      responses:
        '200':
          description: Asset deleted
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                example:
                  status: SUCCESS
        '400':
          $ref: '#/components/responses/ClientError'
        '422':
          $ref: '#/components/responses/BusinessError'
        '500':
          $ref: '#/components/responses/ServerError'
    get:
      tags:
        - assets
      summary: Get one asset by ID
      operationId: getOneAsset
      description: |
        Get one asset by ID
      parameters:
        - $ref: '#/components/parameters/XTraceIdHeader'
        - $ref: '#/components/parameters/AssetIdPathParam'
      responses:
        '200':
          description: The asset matching the ID
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/AssetDTO'
        '400':
          $ref: '#/components/responses/ClientError'
        '422':
          $ref: '#/components/responses/BusinessError'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  # -------------------------------------------------------- #
  # Reusable parameters                                      #
  # -------------------------------------------------------- #
  parameters:
    XTraceIdHeader:
      in: header
      name: X-Trace-Id
      required: true
      allowEmptyValue: false
      schema:
        type: string
        pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'
        example: d290f1ee-6c54-4b01-90e6-d701748f0851
    XIdempotenceIdHeader:
      in: header
      name: X-Idempotence-Id
      required: true
      allowEmptyValue: false
      schema:
        type: string
        pattern: '(\d{4})(0[1-9]|1[0-2])(0[1-9]|[1-2][0-9]|3[01])([0-9A-Za-z]{10}?)([0-9]{18}?)([0-9]{3}?)'
    AssetIdPathParam:
      in: path
      name: assetId
      required: true
      description: Asset ID
      schema:
        type: string

  # -------------------------------------------------------- #
  # Reusable schemas (data models)                           #
  # -------------------------------------------------------- #
  schemas:
    SuccessResponse:
      type: object
      required:
        - status
      properties:
        status:
          $ref: '#/components/schemas/ResponseStatus'
        data:
          type: array
          items:
            type: object
    ErrorResponse:
      type: object
      required:
        - status
      properties:
        status:
          $ref: '#/components/schemas/ResponseStatus'
        error:
          $ref: '#/components/schemas/ResponseError'
    ResponseStatus:
      type: string
      enum:
        - SUCCESS
        - ERROR
    ResponseError:
      type: object
      required:
        - category
        - code
        - message
      properties:
        category:
          $ref: '#/components/schemas/ErrorCategory'
        code:
          type: string
        message:
          type: string
        details:
          type: string
    ErrorCategory:
      type: string
      enum:
        - BUSINESS_ERROR
        - CLIENT_ERROR
        - SERVER_ERROR
    CreateAssetDTO:
      type: object
      required:
        - shortName
        - longName
        - strategy
        - type
      properties:
        shortName:
          type: string
          example: PETROBRAS PN N2
        longName:
          type: string
          example: Petróleo Brasileiro S.A. - Petrobras
        strategy:
          type: string
          example: Variable Income
        type:
          type: string
          example: STOCK
        properties:
          type: object
          additionalProperties:
            type: string
          example:
            ticker: PETR4
    UpdateAssetDTO:
      type: object
      required:
        - shortName
        - longName
        - strategy
        - type
      properties:
        shortName:
          type: string
          example: PETROBRAS PN N2
        longName:
          type: string
          example: Petróleo Brasileiro S.A. - Petrobras
        strategy:
          type: string
          example: Variable Income
        type:
          type: string
          example: STOCK
        properties:
          type: object
          additionalProperties:
            type: string
          example:
            ticker: PETR4
    AssetDTO:
      type: object
      required:
        - id
        - shortName
        - longName
        - strategy
        - type
      properties:
        id:
          type: string
          format: string
        shortName:
          type: string
          example: PETROBRAS PN N2
        longName:
          type: string
          example: Petróleo Brasileiro S.A. - Petrobras
        strategy:
          type: string
          example: Variable Income
        type:
          type: string
          example: STOCK
        properties:
          type: object
          additionalProperties:
            type: string
          example:
            ticker: PETR4

  # -------------------------------------------------------- #
  # Reusable responses                                       #
  # -------------------------------------------------------- #
  responses:
    ClientError:
      description: Client error
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorResponse'
            example:
              status: ERROR
              error:
                category: CLIENT_ERROR
                code: ERROR_CODE
                message: Error message
                additionalCode: ADDITIONAL_ERROR_CODE
                additionalMessage: Additional error message
    BusinessError:
      description: Business error
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorResponse'
            example:
              status: ERROR
              error:
                category: BUSINESS_ERROR
                code: ERROR_CODE
                message: Error message
                additionalCode: ADDITIONAL_ERROR_CODE
                additionalMessage: Additional error message
    ServerError:
      description: Server error
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorResponse'
            example:
              status: ERROR
              error:
                category: SERVER_ERROR
                code: SERVER_ERROR
                message: Unexpected server error
