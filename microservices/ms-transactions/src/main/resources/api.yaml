openapi: 3.0.0

info:
  title: MyWallet Transactions API
  description: MyWallet Transactions API
  version: 1.0.0
  contact:
    email: guidesanti@yahoo.com.br
  license:
    name: The MIT License
    url: https://opensource.org/license/mit/

servers:
  - url: 'https://localhost:8080/ms-transactions/v1'
    description: Local environment

tags:
  - name: transactions
    description: Managet transactions

paths:
  /transactions:
    post:
      tags:
        - transactions
      summary: Create transaction
      operationId: createTransaction
      description: Create transaction
      parameters:
        - $ref: '#/components/parameters/XTraceIdHeader'
        - $ref: '#/components/parameters/XIdempotenceIdHeader'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTransactionRequestDTO'
        description: Transaction to create
      responses:
        '201':
          description: Transaction created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/TransactionDTO'
        '400':
          $ref: '#/components/responses/ClientError'
        '422':
          $ref: '#/components/responses/BusinessError'
        '500':
          $ref: '#/components/responses/ServerError'
    get:
      tags:
        - transactions
      summary: Get all transactions
      operationId: getAllTransactions
      description: |
        Get all transactions
      parameters:
        - $ref: '#/components/parameters/XTraceIdHeader'
      responses:
        '200':
          description: All transactions results
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/TransactionDTO'
        '400':
          $ref: '#/components/responses/ClientError'
        '422':
          $ref: '#/components/responses/BusinessError'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  # -------------------------------------------------------- #
  # Reusable parameters                                      #
  # -------------------------------------------------------- #
  parameters:
    XTraceIdHeader:
      in: header
      name: X-Trace-Id
      required: true
      allowEmptyValue: false
      schema:
        type: string
        pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'
        example: d290f1ee-6c54-4b01-90e6-d701748f0851
    XIdempotenceIdHeader:
      in: header
      name: X-Idempotence-Id
      required: true
      allowEmptyValue: false
      schema:
        type: string
        pattern: '(\d{4})(0[1-9]|1[0-2])(0[1-9]|[1-2][0-9]|3[01])([0-9A-Za-z]{10}?)([0-9]{18}?)([0-9]{3}?)'
    TransactionIdPathParam:
      in: path
      name: transactionId
      required: true
      description: Transaction ID
      schema:
        type: string

  # -------------------------------------------------------- #
  # Reusable schemas (data models)                           #
  # -------------------------------------------------------- #
  schemas:
    SuccessResponse:
      type: object
      required:
        - status
      properties:
        status:
          $ref: '#/components/schemas/ResponseStatus'
        data:
          type: array
          items:
            type: object
    ErrorResponse:
      type: object
      required:
        - status
      properties:
        status:
          $ref: '#/components/schemas/ResponseStatus'
        error:
          $ref: '#/components/schemas/ResponseError'
    ResponseStatus:
      type: string
      enum:
        - SUCCESS
        - ERROR
    ResponseError:
      type: object
      required:
        - category
        - code
        - message
      properties:
        category:
          $ref: '#/components/schemas/ErrorCategory'
        code:
          type: string
        message:
          type: string
        details:
          type: string
    ErrorCategory:
      type: string
      enum:
        - BUSINESS_ERROR
        - CLIENT_ERROR
        - SERVER_ERROR
    CreateTransactionRequestDTO:
      type: object
      required:
        - type
        - units
        - price
      properties:
        type:
          $ref: '#/components/schemas/TransactionType'
        units:
          type: number
        price:
          type: number
        sourceAccountId:
          type: string
        destinationAccountId:
          type: string
        assetId:
          type: string
        description:
          type: string
    TransactionDTO:
      type: object
      required:
        - id
        - state
        - type
        - units
        - price
      properties:
        id:
          type: string
        createdAt:
          type: string
        settledAt:
          type: string
        state:
          type: string
        type:
          type: string
        units:
          type: number
        price:
          type: number
        sourceAccountId:
          type: string
        destinationAccountId:
          type: string
        assetId:
          type: string
        description:
          type: string
    TransactionType:
      type: string
      enum:
        - ASSET_BUY
        - ASSET_SELL
        - TRANSFER
        - DEPOSIT
        - WITHDRAW
        - DIVIDEND
        - INTEREST
        - CASHBACK

  # -------------------------------------------------------- #
  # Reusable responses                                       #
  # -------------------------------------------------------- #
  responses:
    ClientError:
      description: Client error
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorResponse'
            example:
              status: ERROR
              error:
                category: CLIENT_ERROR
                code: ERROR_CODE
                message: Error message
                additionalCode: ADDITIONAL_ERROR_CODE
                additionalMessage: Additional error message
    BusinessError:
      description: Business error
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorResponse'
            example:
              status: ERROR
              error:
                category: BUSINESS_ERROR
                code: ERROR_CODE
                message: Error message
                additionalCode: ADDITIONAL_ERROR_CODE
                additionalMessage: Additional error message
    ServerError:
      description: Server error
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorResponse'
            example:
              status: ERROR
              error:
                category: SERVER_ERROR
                code: SERVER_ERROR
                message: Unexpected server error
